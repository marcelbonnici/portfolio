---
title: Math Homework Machine
subtitle: Makes answer key for worksheets via CV
layout: default
modal-id: 2
date: 2014-07-18
img: math-thumbnail.png
thumbnail: math-thumbnail.png
alt: image-alt
project-date: March 2020
client: Northwestern's MS Robotics Winter Project
category: Mechatronics
description: <h3>Project Overview</h3> To achieve every student’s dream, I created a homework machine to read worksheets and reveal their answers. As a ten-week assignment, problems were limited to simple multiplication problems, called “times tables” in many US schools, where third grade students multiply whole numbers inclusively between 0 and 12. <br> <br> The core project components were a LEGO prototype for projecting the machine’s plausibility, Tesseract for transcribing image files to text, OpenCV for visualizing Tesseract’s bounding boxes/overlaying answers on the photocopy, and a microcontroller for operating the scanner and conversing with the Python code via serial. <br> <br> The input and output iteration explains the order of the program. <br> <br> <img src="https://drive.google.com/uc?id=1M9WZYq9qzs-bMXmwQGeoRdOI0mvVhkou" width="716" height="420"> <h3>LEGO Prototype</h3> As a serious LEGO artist, I built an XY plotter capable of writing any numbers through slight code modifications. Hitting a push button caused a motor to pull in a worksheet, moving the vertical axis. Another motor moved a conveyor belt, sliding an attached pen to traverse the horizontal axis. A third motor controlled a cam, consequently lifting and lowering the pen between characters. <img src="https://drive.google.com/uc?id=1boAKQzaZxb0jvlWbqENwFRRIxH91F4CF"> <h3>Tesseract</h3> The library’s image_to_boxes function returned bounding box locations for characters found in the worksheet’s digital photocopy. Contextual methods for finding text were bypassed by selecting a specific page segmentation method. Consequently, I made my own sorting algorithm to find neighboring characters. From here, identifying an expression by spotting the multiplication sign, “x”, preceded and proceeded by two, nearby numbers was performed. <br> <br> <h3>OpenCV</h3> Besides reading, writing and binarising images, OpenCV contributed to overlaying (a) bounding boxes, (b) spotted multiplication signs and (c) worksheet answers. Bounding boxes and spotted multiplication signs visually help debugging. Meanwhile, OpenCV prints answers with it’s `putText` function for students to see the solutions. <br> <br> <img src="https://drive.google.com/uc?id=1lgxlc9pXNin2q7kp2T7rRqskHNMrAjGC" width="716" height="410"> Before implementing OpenCV vs after implementing openCV <h3>Microcontroller</h3> An Arduino UNO microcontroller coordinated a push-button to power a NEMA17 stepper motor for worksheet scanning, and the microcontroller conversed with Python serially. When one-ninth of the page was shifted for the next scan, the microcontroller sent a serial message to inform the webcam to take a photo. After all nine scans, the Arduino program ended and computer vision work in Python ensued. <br> <br> <img src="https://drive.google.com/uc?id=19qgRy7VfAxkCKwNEBJS3mdubKhr3zhuf" width="716" height="418"> The microcontroller controls a driver, in turn controlling the motor <h3>Future Possibilities</h3> Besides implementing motors to slide and lower the pen, solvable math problems could be easily expanded to addition, division, subtraction and fundamental calculus problems. Word problems would be more ambitious yet plausible, which could lend to standardized math tests and demonstrate mathematical comprehension of a text. <br> <br> For a more thorough, technical analysis of the multiplication homework machine, visit the machine’s <a href="https://github.com/marcelbonnici/times-tables-homework-machine">GitHub repository.</a> <br> <br> Watch the YouTube Video - https://youtu.be/Hddqjd6f_dk
---
